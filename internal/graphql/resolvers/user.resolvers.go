package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.45

import (
	"context"
	"fmt"

	"github.com/anti-duhring/autojud/internal/auth"
	graphql1 "github.com/anti-duhring/autojud/internal/generated/graphql"
	"github.com/anti-duhring/autojud/internal/user"
	"github.com/google/uuid"
)

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, input graphql1.UpdateUserInput) (*graphql1.User, error) {
	id := auth.GetUserID(ctx)
	if id == "" {
		return nil, fmt.Errorf("Access Denied")
	}

	uID, err := uuid.Parse(id)
	if err != nil {
		return nil, err
	}

	email := ""
	if input.Email != nil {
		email = *input.Email
	}

	name := ""
	if input.Name != nil {
		name = *input.Name
	}

	user := &user.User{
		Email:    email,
		Password: input.Password,
		Name:     name,
	}

	updatedUser, err := r.UserService.Update(uID, *user, ctx)
	if err != nil {
		return nil, err
	}

	return &graphql1.User{
		ID:        updatedUser.ID.String(),
		Email:     updatedUser.Email,
		Name:      updatedUser.Name,
		CreatedAt: updatedUser.CreatedAt,
		UpdatedAt: updatedUser.UpdatedAt,
		DeletedAt: updatedUser.DeletedAt,
	}, nil
}

// Mutation returns graphql1.MutationResolver implementation.
func (r *Resolver) Mutation() graphql1.MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }
