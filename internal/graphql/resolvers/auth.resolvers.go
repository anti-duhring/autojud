package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.45

import (
	"context"

	graphql1 "github.com/anti-duhring/autojud/internal/generated/graphql"
	"github.com/anti-duhring/autojud/internal/user"
)

// Login is the resolver for the Login field.
func (r *mutationResolver) Login(ctx context.Context, email string, password string) (*graphql1.AuthResponse, error) {
	response, err := r.AuthService.Login(ctx, email, password)
	if err != nil {
		return nil, err
	}

	return &graphql1.AuthResponse{
		User: &graphql1.User{
			ID:        response.User.ID.String(),
			Name:      response.User.Name,
			Email:     response.User.Email,
			CreatedAt: response.User.CreatedAt,
			UpdatedAt: response.User.UpdatedAt,
			DeletedAt: response.User.DeletedAt,
		},
		Token:    response.Token,
		TokenExp: float64(response.TokenExp),
	}, nil
}

// Register is the resolver for the Register field.
func (r *mutationResolver) Register(ctx context.Context, input graphql1.CreateUserInput) (*graphql1.AuthResponse, error) {
	user := user.User{
		Name:     input.Name,
		Email:    input.Email,
		Password: &input.Password,
	}

	response, err := r.AuthService.Register(ctx, user)
	if err != nil {
		return nil, err
	}

	return &graphql1.AuthResponse{
		User: &graphql1.User{
			ID:        response.User.ID.String(),
			Name:      response.User.Name,
			Email:     response.User.Email,
			CreatedAt: response.User.CreatedAt,
			UpdatedAt: response.User.UpdatedAt,
			DeletedAt: response.User.DeletedAt,
		},
		Token:    response.Token,
		TokenExp: float64(response.TokenExp),
	}, nil
}
